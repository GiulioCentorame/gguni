% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{palette_constructor}
\alias{palette_constructor}
\title{Construct palettes from a vector of colours}
\usage{
palette_constructor(
  colours = NULL,
  type = c("discrete", "continuous"),
  reverse = FALSE,
  n = 512L,
  ...
)
}
\arguments{
\item{colours}{Vector of colours (as Hex or another object )}

\item{type}{Either \code{discrete} for discrete scales, or \code{continuous} for continuous scales}

\item{reverse}{Logical; if \code{TRUE} reverses the order of the colours in \code{colours}. Default: \code{FALSE}}

\item{n}{Optional; \code{integer} value with the number of colours to interpolate (if \code{type = "continuous"}). Default: 512}

\item{...}{Optional; additional arguments to pass to \code{grDevices::colorRampPalette()} (if \code{type = "continuous"})}
}
\value{
Vector of colours
}
\description{
Returns either a function with the exact discrete values for the palette (for \code{type = "discrete"}), or interpolated values for the missing colours (for \code{type = "continuous"}; 512 by default).
}
\details{
The function returned by \code{type = "discrete"} uses the format \code{palette(n)}, where \code{n} specifies the range \code{1:n} of colours to show.

The reason why the outputs are different is that the discrete value function is used by \code{ggplot2::discrete_scale}, while the continuous values are used by \verb{ggplot2::scale_\{fill,colour\}_gradientn()}.
}
\examples{
library(scales)

my_palette <- c("My black" = "black", "My white" = "white")

# Construct a discrete palette
d1 <-
palette_constructor(colours = my_palette,
                    type = "discrete")

# Show two colours
show_col(d1(2))

# Show only one colour
show_col(d1(1))

# Construct a continuous palette (my 2 colours + 8 intermediate colours)
c1 <-
palette_constructor(colours = my_palette,
                    type = "continuous",
                    n = 10)

show_col(c1)

# Reverse palette order
c2 <-
palette_constructor(colours = my_palette,
                    type = "continuous",
                    n = 10,
                    reverse = TRUE)

show_col(c2)
}
